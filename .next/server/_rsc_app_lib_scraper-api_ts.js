"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_app_lib_scraper-api_ts";
exports.ids = ["_rsc_app_lib_scraper-api_ts"];
exports.modules = {

/***/ "(rsc)/./app/lib/scraper-api.ts":
/*!********************************!*\
  !*** ./app/lib/scraper-api.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   runScraperAPI: () => (/* binding */ runScraperAPI)\n/* harmony export */ });\n/* harmony import */ var _supabaseAdmin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabaseAdmin */ \"(rsc)/./app/lib/supabaseAdmin.ts\");\n// Server-side scraper logic for API routes\n\nasync function runScraperAPI() {\n    try {\n        console.log(\"\\uD83D\\uDD04 Fetching latest internships from GitHub...\");\n        // Fetch the live README from GitHub\n        const response = await fetch(\"https://raw.githubusercontent.com/vanshb03/Summer2026-Internships/main/README.md\");\n        if (!response.ok) {\n            throw new Error(`GitHub fetch failed: ${response.status}`);\n        }\n        const markdownContent = await response.text();\n        console.log(\"\\uD83D\\uDCD6 Parsing GitHub README...\");\n        // Parse internships from the markdown table\n        let internships = parseInternshipsFromMarkdown(markdownContent);\n        if (internships.length === 0) {\n            return {\n                success: false,\n                error: \"No internships found in GitHub README\"\n            };\n        }\n        console.log(\"\\uD83D\\uDD17 Checking application links for closed internships...\");\n        // Check application links to detect closed internships (sample a few)\n        internships = await checkApplicationLinks(internships);\n        // Add IDs and ensure database compatibility\n        internships = internships.map((internship, index)=>{\n            const now = new Date().toISOString();\n            // Only include fields that exist in database schema\n            return {\n                id: `${internship.company.toLowerCase().replace(/[^a-z0-9]/g, \"_\")}_${internship.role.toLowerCase().replace(/[^a-z0-9]/g, \"_\")}_${index}`,\n                company: internship.company,\n                role: internship.role,\n                category: internship.category,\n                locations: internship.locations,\n                application_link: internship.application_link,\n                date_posted: internship.date_posted,\n                requires_citizenship: internship.requires_citizenship || false,\n                no_sponsorship: internship.no_sponsorship || false,\n                is_subsidiary: internship.is_subsidiary || false,\n                is_freshman_friendly: internship.is_freshman_friendly || false,\n                is_closed: internship.is_closed || false,\n                is_active: true,\n                created_at: now,\n                updated_at: now\n            };\n        });\n        console.log(`📊 Found ${internships.length} internships, updating database...`);\n        // Use Supabase admin client for server-side operations\n        if (!_supabaseAdmin__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            throw new Error(\"Supabase admin client not configured\");\n        }\n        // Bulk upsert internships\n        const { data, error } = await _supabaseAdmin__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"internships\").upsert(internships, {\n            onConflict: \"id\",\n            ignoreDuplicates: false\n        });\n        if (error) {\n            throw new Error(`Database update failed: ${error.message}`);\n        }\n        // Log the scrape run\n        await _supabaseAdmin__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"scrape_logs\").insert({\n            run_id: `vercel_${Date.now()}`,\n            status: \"success\",\n            internships_found: internships.length,\n            internships_added: internships.length,\n            internships_updated: 0,\n            completed_at: new Date().toISOString()\n        });\n        return {\n            success: true,\n            internshipsFound: internships.length,\n            updated: 0,\n            added: internships.length\n        };\n    } catch (error) {\n        console.error(\"Scraper error:\", error);\n        // Log the failed run\n        if (_supabaseAdmin__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            await _supabaseAdmin__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"scrape_logs\").insert({\n                run_id: `vercel_${Date.now()}`,\n                status: \"error\",\n                error_message: error instanceof Error ? error.message : \"Unknown error\",\n                completed_at: new Date().toISOString()\n            });\n        }\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        };\n    }\n}\nfunction parseInternshipsFromMarkdown(content) {\n    const lines = content.split(\"\\n\");\n    const internships = [];\n    // Find the table start - look for the exact header you specified\n    let tableStart = -1;\n    for(let i = 0; i < lines.length; i++){\n        if (lines[i].includes(\"| Company | Role | Location | Application/Link | Date Posted |\")) {\n            tableStart = i + 2; // Skip header and separator line\n            break;\n        }\n    }\n    if (tableStart === -1) {\n        console.warn(\"Table header not found in markdown\");\n        return [];\n    }\n    console.log(`Found table at line ${tableStart - 2}, parsing internships...`);\n    // Parse each table row\n    for(let i = tableStart; i < lines.length; i++){\n        const line = lines[i].trim();\n        // Skip empty lines or non-table lines\n        if (!line || !line.startsWith(\"|\") || line === \"---\") {\n            continue;\n        }\n        const parts = line.split(\"|\").map((p)=>p.trim()).filter((p)=>p);\n        if (parts.length < 4) continue;\n        const company = cleanText(parts[0]);\n        const role = cleanText(parts[1]);\n        const locationRaw = parts[2];\n        const applicationRaw = parts[3];\n        const datePosted = parts[4] ? cleanText(parts[4]) : \"Unknown\";\n        if (!company || !role) continue;\n        // Parse locations (handle details/summary format)\n        const locations = parseLocations(locationRaw);\n        // Extract application link\n        const applicationLink = extractLink(applicationRaw);\n        // Detect requirements from emoji/text patterns\n        const requirements = detectRequirements(role + \" \" + company);\n        const internship = {\n            company: company,\n            role: requirements.cleanRole,\n            category: categorizeRole(requirements.cleanRole),\n            locations: locations,\n            application_link: applicationLink,\n            date_posted: datePosted,\n            requires_citizenship: requirements.requiresCitizenship,\n            no_sponsorship: requirements.noSponsorship,\n            is_subsidiary: company.includes(\"↳\"),\n            is_freshman_friendly: requirements.isFreshmanFriendly,\n            is_closed: requirements.isClosed\n        };\n        internships.push(internship);\n    }\n    console.log(`Parsed ${internships.length} internships from GitHub`);\n    return internships;\n}\nfunction parseLocations(locationText) {\n    if (!locationText) return [\n        \"Remote\"\n    ];\n    // Handle details/summary format like: <details><summary>**5 locations**</summary>Southlake, TX</br>Austin, TX</br>Westlake, TX</br>Ann Arbor, MI</br>Indianapolis, IN</details>\n    if (locationText.includes(\"<details>\")) {\n        const contentMatch = locationText.match(/<\\/summary>(.*?)<\\/details>/s);\n        if (contentMatch) {\n            const locationContent = contentMatch[1];\n            console.log(`Raw location content: \"${locationContent}\"`);\n            // Split by </br> or <br> tags and clean up\n            const locations = locationContent.split(/<\\/?br\\/?>/i).map((loc)=>loc.trim()).filter((loc)=>loc.length > 0).map((loc)=>{\n                // Clean up any remaining HTML entities or tags\n                return loc.replace(/&[a-zA-Z0-9#]+;/g, \"\").replace(/<[^>]*>/g, \"\").trim();\n            });\n            console.log(`Parsed locations from details: [${locations.map((l)=>`\"${l}\"`).join(\", \")}]`);\n            return locations.length > 0 ? locations : [\n                \"Multiple Locations\"\n            ];\n        }\n    }\n    // Handle regular location text\n    const cleaned = cleanText(locationText);\n    // Skip if it still contains \"locations\" (means parsing failed)\n    if (cleaned.includes(\"locations\") || cleaned.includes(\"location\")) {\n        console.warn(`Failed to parse location: ${cleaned}`);\n        return [\n            \"Multiple Locations\"\n        ];\n    }\n    // Split by common separators\n    const locations = cleaned.split(/[,;\\/\\n]/).map((loc)=>loc.trim()).filter((loc)=>loc.length > 0);\n    return locations.length > 0 ? locations : [\n        \"Remote\"\n    ];\n}\nfunction detectRequirements(text) {\n    if (!text) return {\n        requiresCitizenship: false,\n        noSponsorship: false,\n        isClosed: false,\n        isFreshmanFriendly: false,\n        cleanRole: text\n    };\n    let cleanRole = text;\n    let requiresCitizenship = false;\n    let noSponsorship = false;\n    let isClosed = false;\n    let isFreshmanFriendly = false;\n    // Check for citizenship requirements (US flag emojis)\n    if (text.includes(\"\\uD83C\\uDDFA\\uD83C\\uDDF8\") || text.includes(\"\\xf0\\xba\\xf0\\xb8\") || text.includes(\"\\ud83c\\uddfa\\ud83c\\uddf8\")) {\n        requiresCitizenship = true;\n    }\n    // Check for no sponsorship (passport/no-entry emojis)\n    if (text.includes(\"\\uD83D\\uDEC2\") || text.includes(\"\\xf0\") || text.includes(\"\\ud83d\\udec2\")) {\n        noSponsorship = true;\n    }\n    // Check for closed applications (lock emoji)\n    if (text.includes(\"\\uD83D\\uDD12\") || text.includes(\"\\ud83d\\udd12\")) {\n        isClosed = true;\n    }\n    // Check for freshman friendly\n    if (text.toLowerCase().includes(\"freshman\") || text.includes(\"\\uD83D\\uDC68‍\\uD83C\\uDF93\") || text.includes(\"\\uD83C\\uDF93\")) {\n        isFreshmanFriendly = true;\n    }\n    // Clean the role by removing emojis and extra characters\n    const emojiPatterns = [\n        /🇺🇸/g,\n        /ðºð¸/g,\n        /🛂/g,\n        /ð(?![\\w])/g,\n        /🔒/g,\n        /👨‍🎓/g,\n        /🎓/g,\n        /\\\\ud83c\\\\uddfa\\\\ud83c\\\\uddf8/g,\n        /\\\\ud83d\\\\udec2/g,\n        /\\\\ud83d\\\\udd12/g\n    ];\n    for (const pattern of emojiPatterns){\n        cleanRole = cleanRole.replace(pattern, \"\");\n    }\n    // Clean up extra spaces and trim\n    cleanRole = cleanRole.replace(/\\s+/g, \" \").trim();\n    return {\n        requiresCitizenship,\n        noSponsorship,\n        isClosed,\n        isFreshmanFriendly,\n        cleanRole\n    };\n}\nfunction cleanText(text) {\n    if (!text) return \"\";\n    // Remove markdown links but keep the text\n    let cleaned = text.replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, \"$1\");\n    // Remove HTML tags\n    cleaned = cleaned.replace(/<[^>]*>/g, \"\");\n    // Clean up extra spaces\n    cleaned = cleaned.replace(/\\s+/g, \" \").trim();\n    return cleaned;\n}\nfunction extractLink(cell) {\n    if (!cell) return null;\n    // Extract URL from markdown link format [text](url)\n    const markdownMatch = cell.match(/\\[([^\\]]+)\\]\\(([^)]+)\\)/);\n    if (markdownMatch) {\n        return markdownMatch[2];\n    }\n    // Extract direct URL\n    const urlMatch = cell.match(/(https?:\\/\\/[^\\s]+)/);\n    if (urlMatch) {\n        return urlMatch[1];\n    }\n    return null;\n}\nfunction categorizeRole(role) {\n    if (!role) return \"Other\";\n    const lowerRole = role.toLowerCase();\n    // Comprehensive categorization\n    const categories = {\n        \"Software Engineering\": [\n            \"software engineer\",\n            \"swe\",\n            \"software development\",\n            \"software dev\",\n            \"programmer\",\n            \"coding\"\n        ],\n        \"Full Stack\": [\n            \"full stack\",\n            \"fullstack\",\n            \"full-stack\"\n        ],\n        \"Front End\": [\n            \"frontend\",\n            \"front-end\",\n            \"front end\",\n            \"ui\",\n            \"user interface\",\n            \"react\",\n            \"vue\",\n            \"angular\"\n        ],\n        \"Back End\": [\n            \"backend\",\n            \"back-end\",\n            \"back end\",\n            \"server\",\n            \"api\",\n            \"database\",\n            \"microservices\"\n        ],\n        \"AI/ML\": [\n            \"ai\",\n            \"artificial intelligence\",\n            \"ml\",\n            \"machine learning\",\n            \"deep learning\",\n            \"neural network\",\n            \"nlp\",\n            \"computer vision\"\n        ],\n        \"Data Science\": [\n            \"data science\",\n            \"data scientist\",\n            \"predictive analytics\",\n            \"statistical analysis\"\n        ],\n        \"Data Engineering\": [\n            \"data engineer\",\n            \"data pipeline\",\n            \"data warehouse\",\n            \"etl\",\n            \"data platform\"\n        ],\n        \"DevOps\": [\n            \"devops\",\n            \"infrastructure\",\n            \"ci/cd\",\n            \"docker\",\n            \"kubernetes\",\n            \"terraform\",\n            \"cloud ops\"\n        ],\n        \"Mobile\": [\n            \"mobile\",\n            \"ios\",\n            \"android\",\n            \"react native\",\n            \"flutter\",\n            \"swift\",\n            \"kotlin\"\n        ],\n        \"Security\": [\n            \"security\",\n            \"cybersecurity\",\n            \"cyber\",\n            \"infosec\",\n            \"penetration test\"\n        ],\n        \"Product Management\": [\n            \"product manager\",\n            \"product management\",\n            \"pm\",\n            \"product owner\"\n        ],\n        \"Quant/Trading\": [\n            \"quant\",\n            \"quantitative\",\n            \"trading\",\n            \"algorithmic trading\",\n            \"financial engineering\"\n        ],\n        \"Research\": [\n            \"research\",\n            \"researcher\",\n            \"research scientist\",\n            \"r&d\",\n            \"research engineer\"\n        ],\n        \"Hardware Engineering\": [\n            \"hardware\",\n            \"hardware engineer\",\n            \"electrical\",\n            \"embedded\",\n            \"firmware\"\n        ],\n        \"Cloud Engineering\": [\n            \"cloud\",\n            \"aws\",\n            \"azure\",\n            \"gcp\",\n            \"cloud engineer\",\n            \"cloud architect\"\n        ],\n        \"Information Technology\": [\n            \"information technology\",\n            \"it\",\n            \"it support\",\n            \"systems admin\"\n        ],\n        \"Quality Assurance\": [\n            \"qa\",\n            \"quality assurance\",\n            \"test\",\n            \"testing\",\n            \"automation test\",\n            \"sdet\"\n        ],\n        \"UX/UI Design\": [\n            \"ux\",\n            \"ui\",\n            \"user experience\",\n            \"design\",\n            \"interaction design\"\n        ]\n    };\n    for (const [category, keywords] of Object.entries(categories)){\n        if (keywords.some((keyword)=>lowerRole.includes(keyword))) {\n            return category;\n        }\n    }\n    return \"Other\";\n}\n// Check application links to detect closed internships\nasync function checkApplicationLinks(internships) {\n    // Only check a sample to avoid overwhelming servers (check max 50 random links)\n    const sampleSize = Math.min(50, internships.length);\n    const shuffled = [\n        ...internships\n    ].sort(()=>0.5 - Math.random());\n    const sampled = shuffled.slice(0, sampleSize);\n    console.log(`🔍 Checking ${sampled.length} application links for status...`);\n    const promises = sampled.map(async (internship, index)=>{\n        if (!internship.application_link) {\n            return internship;\n        }\n        try {\n            // Add delay to be respectful to servers\n            await new Promise((resolve)=>setTimeout(resolve, index * 200));\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 10000); // 10 second timeout\n            const response = await fetch(internship.application_link, {\n                method: \"HEAD\",\n                signal: controller.signal,\n                headers: {\n                    \"User-Agent\": \"GT-CS-Internship-Portal/1.0 (Educational Purpose)\"\n                }\n            });\n            clearTimeout(timeoutId);\n            // Check for common closed indicators\n            if (response.status === 404) {\n                console.log(`❌ ${internship.company} - 404 Not Found`);\n                internship.is_closed = true;\n                internship.closure_reason = \"404 - Page not found\";\n            } else if (response.status >= 400) {\n                console.log(`⚠️ ${internship.company} - HTTP ${response.status}`);\n                internship.is_closed = true;\n                internship.closure_reason = `HTTP ${response.status}`;\n            } else {\n                // For successful responses, we could check the actual content\n                // but for now, assume it's open if accessible\n                internship.is_closed = false;\n            }\n        } catch (error) {\n            // Don't mark as closed for network errors, could be temporary\n            console.log(`⏭️ ${internship.company} - Network error, skipping`);\n        }\n        return internship;\n    });\n    // Wait for all link checks to complete\n    const checkedSample = await Promise.all(promises);\n    // Replace checked internships in original array\n    const checkedMap = new Map(checkedSample.map((i)=>[\n            i.application_link,\n            i\n        ]));\n    return internships.map((internship)=>{\n        const checked = checkedMap.get(internship.application_link);\n        return checked || internship;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/scraper-api.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/supabaseAdmin.ts":
/*!**********************************!*\
  !*** ./app/lib/supabaseAdmin.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Admin client for server-side operations\nconst supabaseUrl = \"https://bgmppiwflytcvbpdudfq.supabase.co\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabaseAdmin = supabaseServiceKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey) : null;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabaseAdmin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvbGliL3N1cGFiYXNlQWRtaW4udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBRXBELDBDQUEwQztBQUMxQyxNQUFNQyxjQUFjQywwQ0FBb0M7QUFDeEQsTUFBTUcscUJBQXFCSCxRQUFRQyxHQUFHLENBQUNHLHlCQUF5QjtBQUV6RCxNQUFNQyxnQkFBZ0JGLHFCQUN6QkwsbUVBQVlBLENBQUNDLGFBQWFJLHNCQUMxQixLQUFJO0FBRVIsaUVBQWVFLGFBQWFBLEVBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ndC1jcy1pbnRlcm5zaGlwLXBvcnRhbC8uL2FwcC9saWIvc3VwYWJhc2VBZG1pbi50cz9jZTIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcblxuLy8gQWRtaW4gY2xpZW50IGZvciBzZXJ2ZXItc2lkZSBvcGVyYXRpb25zXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCFcbmNvbnN0IHN1cGFiYXNlU2VydmljZUtleSA9IHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVlcblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBzdXBhYmFzZVNlcnZpY2VLZXkgXG4gID8gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZVNlcnZpY2VLZXkpXG4gIDogbnVsbFxuXG5leHBvcnQgZGVmYXVsdCBzdXBhYmFzZUFkbWluIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlU2VydmljZUtleSIsIlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkiLCJzdXBhYmFzZUFkbWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/supabaseAdmin.ts\n");

/***/ })

};
;