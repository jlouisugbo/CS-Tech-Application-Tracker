"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/lib/hooks.ts":
/*!**************************!*\
  !*** ./app/lib/hooks.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; },\n/* harmony export */   useFilterOptions: function() { return /* binding */ useFilterOptions; },\n/* harmony export */   useInternshipStats: function() { return /* binding */ useInternshipStats; },\n/* harmony export */   useInternships: function() { return /* binding */ useInternships; },\n/* harmony export */   useIsSaved: function() { return /* binding */ useIsSaved; },\n/* harmony export */   useSavedInternships: function() { return /* binding */ useSavedInternships; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _supabaseClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabaseClient */ \"(app-pages-browser)/./app/lib/supabaseClient.ts\");\n/* harmony import */ var _sample_data_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sample-data.json */ \"(app-pages-browser)/./app/lib/sample-data.json\");\n\n\n// Temporarily import sample data for testing\n\n// Hook for fetching internships with filters\nfunction useInternships(filters) {\n    const [internships, setInternships] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchInternships = async ()=>{\n            try {\n                setLoading(true);\n                setError(null);\n                // Fetch from Supabase database\n                const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"internships\").select(\"*\").eq(\"is_active\", true).order(\"created_at\", {\n                    ascending: false\n                });\n                let filtered = [];\n                if (error) {\n                    console.error(\"Error fetching internships:\", error);\n                    // Fallback to sample data if database fails\n                    console.log(\"Falling back to sample data\");\n                    const formattedInternships = _sample_data_json__WEBPACK_IMPORTED_MODULE_2__.internships.map((internship, index)=>({\n                            ...internship,\n                            id: \"sample_\".concat(index),\n                            is_active: true,\n                            last_seen: new Date().toISOString(),\n                            created_at: new Date().toISOString()\n                        }));\n                    filtered = formattedInternships;\n                } else {\n                    console.log(\"Successfully loaded \".concat((data === null || data === void 0 ? void 0 : data.length) || 0, \" internships from database\"));\n                    filtered = data || [];\n                }\n                // Apply client-side filters\n                if (filters.category && filters.category !== \"All\") {\n                    filtered = filtered.filter((i)=>i.category === filters.category);\n                }\n                if (filters.citizenship && filters.citizenship === \"no_citizenship\") {\n                    filtered = filtered.filter((i)=>!i.requires_citizenship);\n                }\n                if (filters.sponsorship && filters.sponsorship === \"sponsorship_ok\") {\n                    filtered = filtered.filter((i)=>!i.no_sponsorship);\n                }\n                if (filters.freshman_friendly) {\n                    filtered = filtered.filter((i)=>i.is_freshman_friendly);\n                }\n                if (filters.location && filters.location !== \"All\") {\n                    filtered = filtered.filter((i)=>i.locations.some((loc)=>loc.toLowerCase().includes(filters.location.toLowerCase())));\n                }\n                if (filters.company && filters.company !== \"All\") {\n                    filtered = filtered.filter((i)=>i.company.toLowerCase().includes(filters.company.toLowerCase()));\n                }\n                if (filters.date_posted && filters.date_posted !== \"All\") {\n                    filtered = filtered.filter((i)=>i.date_posted === filters.date_posted);\n                }\n                // Apply sorting with priority for open internships\n                filtered.sort((a, b)=>{\n                    // First priority: Open internships come before closed ones\n                    if (a.is_closed !== b.is_closed) {\n                        return a.is_closed ? 1 : -1; // Open (false) comes first\n                    }\n                    // Second priority: Apply user-selected sorting\n                    switch(filters.sort_by){\n                        case \"date_newest\":\n                            // Sort by date posted (newest first) - parse \"Sep 02\" format\n                            const dateA = new Date(\"\".concat(a.date_posted, \" 2025\")).getTime();\n                            const dateB = new Date(\"\".concat(b.date_posted, \" 2025\")).getTime();\n                            return dateB - dateA;\n                        case \"date_oldest\":\n                            const dateA2 = new Date(\"\".concat(a.date_posted, \" 2025\")).getTime();\n                            const dateB2 = new Date(\"\".concat(b.date_posted, \" 2025\")).getTime();\n                            return dateA2 - dateB2;\n                        case \"company_az\":\n                            return a.company.localeCompare(b.company);\n                        case \"company_za\":\n                            return b.company.localeCompare(a.company);\n                        default:\n                            return 0;\n                    }\n                });\n                setInternships(filtered);\n            } catch (err) {\n                setError(err instanceof Error ? err.message : \"Failed to fetch internships\");\n                setInternships([]);\n            } finally{\n                setLoading(false);\n            }\n        };\n        // Simulate network delay\n        setTimeout(fetchInternships, 300);\n    }, [\n        filters.category,\n        filters.location,\n        filters.citizenship,\n        filters.sponsorship,\n        filters.freshman_friendly,\n        filters.company,\n        filters.date_posted,\n        filters.sort_by,\n        filters.view_mode\n    ]);\n    return {\n        internships,\n        loading,\n        error,\n        refetch: ()=>{}\n    };\n}\n// Hook for authentication\nfunction useAuth() {\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Get initial session\n        const getSession = async ()=>{\n            try {\n                const { data: { session } } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.auth.getSession();\n                if (session === null || session === void 0 ? void 0 : session.user) {\n                    // Fetch user profile\n                    const { data: profile } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"users\").select(\"*\").eq(\"id\", session.user.id).single();\n                    setUser(profile);\n                }\n            } catch (error) {\n                console.error(\"Error getting session:\", error);\n            } finally{\n                setLoading(false);\n            }\n        };\n        getSession();\n        // Listen for auth changes\n        const { data: { subscription } } = _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.auth.onAuthStateChange(async (event, session)=>{\n            if (session === null || session === void 0 ? void 0 : session.user) {\n                const { data: profile } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"users\").select(\"*\").eq(\"id\", session.user.id).single();\n                setUser(profile);\n            } else {\n                setUser(null);\n            }\n            setLoading(false);\n        });\n        return ()=>subscription.unsubscribe();\n    }, []);\n    const signIn = async (email, password)=>{\n        const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.auth.signInWithPassword({\n            email,\n            password\n        });\n        return {\n            error\n        };\n    };\n    const signUp = async (email, password)=>{\n        const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.auth.signUp({\n            email,\n            password,\n            options: {\n                emailRedirectTo: \"\".concat(window.location.origin, \"/\")\n            }\n        });\n        return {\n            error\n        };\n    };\n    const signOut = async ()=>{\n        const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.auth.signOut();\n        return {\n            error\n        };\n    };\n    return {\n        user,\n        loading,\n        signIn,\n        signUp,\n        signOut\n    };\n}\n// Hook for saved internships\nfunction useSavedInternships() {\n    const [savedInternships, setSavedInternships] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchSavedInternships = async ()=>{\n            try {\n                setLoading(true);\n                setError(null);\n                const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"user_saved_internships\").select(\"\\n            *,\\n            internships (\\n              company,\\n              role,\\n              category,\\n              locations,\\n              application_link,\\n              date_posted\\n            )\\n          \").order(\"saved_at\", {\n                    ascending: false\n                });\n                if (error) throw error;\n                setSavedInternships(data || []);\n            } catch (err) {\n                setError(err instanceof Error ? err.message : \"Failed to fetch saved internships\");\n                setSavedInternships([]);\n            } finally{\n                setLoading(false);\n            }\n        };\n        fetchSavedInternships();\n    }, []);\n    const saveInternship = async (internshipId, notes)=>{\n        try {\n            const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"user_saved_internships\").insert({\n                internship_id: internshipId,\n                notes,\n                application_status: \"saved\"\n            });\n            if (error) throw error;\n            // Refresh saved internships\n            const { data } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"user_saved_internships\").select(\"\\n          *,\\n          internships (\\n            company,\\n            role,\\n            category,\\n            locations,\\n            application_link,\\n            date_posted\\n          )\\n        \").order(\"saved_at\", {\n                ascending: false\n            });\n            setSavedInternships(data || []);\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : \"Failed to save internship\"\n            };\n        }\n    };\n    const unsaveInternship = async (internshipId)=>{\n        try {\n            const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"user_saved_internships\").delete().eq(\"internship_id\", internshipId);\n            if (error) throw error;\n            setSavedInternships((prev)=>prev.filter((saved)=>saved.internship_id !== internshipId));\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : \"Failed to unsave internship\"\n            };\n        }\n    };\n    const updateApplicationStatus = async (internshipId, status)=>{\n        try {\n            const updateData = {\n                application_status: status\n            };\n            // Add timestamp for applied status\n            if (status === \"applied\") {\n                updateData.applied_at = new Date().toISOString();\n            }\n            const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"user_saved_internships\").update(updateData).eq(\"internship_id\", internshipId);\n            if (error) throw error;\n            setSavedInternships((prev)=>prev.map((saved)=>saved.internship_id === internshipId ? {\n                        ...saved,\n                        ...updateData\n                    } : saved));\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : \"Failed to update status\"\n            };\n        }\n    };\n    const addNote = async (internshipId, note)=>{\n        try {\n            const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"user_saved_internships\").update({\n                notes: note\n            }).eq(\"internship_id\", internshipId);\n            if (error) throw error;\n            setSavedInternships((prev)=>prev.map((saved)=>saved.internship_id === internshipId ? {\n                        ...saved,\n                        notes: note\n                    } : saved));\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : \"Failed to add note\"\n            };\n        }\n    };\n    const markLinkClicked = async (savedInternshipId)=>{\n        try {\n            const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"user_saved_internships\").update({\n                application_link_clicked_at: new Date().toISOString(),\n                link_verified: true\n            }).eq(\"id\", savedInternshipId);\n            if (error) throw error;\n            setSavedInternships((prev)=>prev.map((saved)=>saved.id === savedInternshipId ? {\n                        ...saved,\n                        application_link_clicked_at: new Date().toISOString(),\n                        link_verified: true\n                    } : saved));\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                error: error instanceof Error ? error.message : \"Failed to mark link clicked\"\n            };\n        }\n    };\n    return {\n        savedInternships,\n        loading,\n        error,\n        saveInternship,\n        unsaveInternship,\n        updateApplicationStatus,\n        addNote,\n        markLinkClicked\n    };\n}\n// Hook for getting internship stats\nfunction useInternshipStats() {\n    const [stats, setStats] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchStats = async ()=>{\n            try {\n                setLoading(true);\n                // Get total count\n                const { count: totalCount } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"internships\").select(\"*\", {\n                    count: \"exact\",\n                    head: true\n                }).eq(\"is_active\", true);\n                // Get freshman-friendly count\n                const { count: freshmanCount } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"internships\").select(\"*\", {\n                    count: \"exact\",\n                    head: true\n                }).eq(\"is_active\", true).eq(\"is_freshman_friendly\", true);\n                // Get category breakdown\n                const { data: categories } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.rpc(\"get_category_counts\");\n                setStats({\n                    total_active: totalCount || 0,\n                    freshman_friendly_count: freshmanCount || 0,\n                    categories: categories || [],\n                    last_updated: new Date().toISOString()\n                });\n            } catch (error) {\n                console.error(\"Error fetching stats:\", error);\n            } finally{\n                setLoading(false);\n            }\n        };\n        fetchStats();\n    }, []);\n    return {\n        stats,\n        loading\n    };\n}\n// Hook to check if internship is saved by current user\nfunction useIsSaved(internshipId) {\n    const [isSaved, setIsSaved] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const checkIfSaved = async ()=>{\n            try {\n                // Remove .single() to avoid 406 errors - just check if any data exists\n                const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"user_saved_internships\").select(\"id\").eq(\"internship_id\", internshipId).limit(1);\n                // Only consider it an error if it's not a \"no rows\" error\n                if (error && error.code !== \"PGRST116\") {\n                    console.error(\"Error checking saved status:\", error);\n                }\n                setIsSaved(Boolean(data && data.length > 0));\n            } catch (error) {\n                // Silently handle errors - assume not saved\n                setIsSaved(false);\n            } finally{\n                setLoading(false);\n            }\n        };\n        if (internshipId && internshipId !== \"sample_\") {\n            checkIfSaved();\n        } else {\n            // Don't query for invalid IDs\n            setIsSaved(false);\n            setLoading(false);\n        }\n    }, [\n        internshipId\n    ]);\n    return {\n        isSaved,\n        loading\n    };\n}\n// Hook to extract dynamic filter options from data\nfunction useFilterOptions() {\n    const [companies, setCompanies] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        \"All\"\n    ]);\n    const [locations, setLocations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        \"All\"\n    ]);\n    const [datePosted, setDatePosted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        \"All\"\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchOptions = async ()=>{\n            try {\n                // Fetch from Supabase database\n                const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"internships\").select(\"company, locations, date_posted\").eq(\"is_active\", true);\n                if (error || !data) {\n                    // Fallback to sample data\n                    const uniqueCompanies = new Set();\n                    const uniqueLocations = new Set();\n                    const uniqueDates = new Set();\n                    _sample_data_json__WEBPACK_IMPORTED_MODULE_2__.internships.forEach((internship)=>{\n                        uniqueCompanies.add(internship.company);\n                        // Add each location\n                        internship.locations.forEach((location)=>{\n                            if (location.trim() && !location.includes(\"locations\")) {\n                                uniqueLocations.add(location.trim());\n                            }\n                        });\n                        uniqueDates.add(internship.date_posted);\n                    });\n                    // Sort and set options\n                    setCompanies([\n                        \"All\",\n                        ...Array.from(uniqueCompanies).sort()\n                    ]);\n                    setLocations([\n                        \"All\",\n                        ...Array.from(uniqueLocations).sort()\n                    ]);\n                    setDatePosted([\n                        \"All\",\n                        ...Array.from(uniqueDates).sort()\n                    ]);\n                    return;\n                }\n                // Extract unique values from database\n                const uniqueCompanies = new Set();\n                const uniqueLocations = new Set();\n                const uniqueDates = new Set();\n                data.forEach((internship)=>{\n                    var // Add each location\n                    _internship_locations;\n                    uniqueCompanies.add(internship.company);\n                    (_internship_locations = internship.locations) === null || _internship_locations === void 0 ? void 0 : _internship_locations.forEach((location)=>{\n                        if (location.trim() && !location.includes(\"locations\")) {\n                            uniqueLocations.add(location.trim());\n                        }\n                    });\n                    uniqueDates.add(internship.date_posted);\n                });\n                // Sort and set options\n                setCompanies([\n                    \"All\",\n                    ...Array.from(uniqueCompanies).sort()\n                ]);\n                setLocations([\n                    \"All\",\n                    ...Array.from(uniqueLocations).sort()\n                ]);\n                setDatePosted([\n                    \"All\",\n                    ...Array.from(uniqueDates).sort()\n                ]);\n            } catch (error) {\n                console.error(\"Error fetching filter options:\", error);\n            }\n        };\n        fetchOptions();\n    }, []);\n    return {\n        companies,\n        locations,\n        datePosted\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/hooks.ts\n"));

/***/ })

});